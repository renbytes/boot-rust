// proto/plugin.proto
// This file defines the gRPC service contract for all Spex language plugins.
syntax = "proto3";
package plugin;

// The SpexPlugin service is the core of the plugin system. It defines the
// set of remote procedure calls (RPCs) that the main Spex application can
// invoke on a language plugin.
service SpexPlugin {
  // GenerateProject is the primary RPC. It takes a single request containing
  // all necessary configuration and the user's specification, and it returns
  // a complete set of files for the new project.
  rpc GenerateProject(GenerateRequest) returns (GenerateResponse) {}
}

// GenerateRequest contains all the information a plugin needs to perform
// a complete code generation task. It is sent from the core Spex app to the plugin.
message GenerateRequest {
  // The full, raw content of the user's `spec.toml` file. The plugin is
  // responsible for parsing and validating this content. This keeps the
  // plugin fully decoupled from the core application's internal models.
  string spec_toml_content = 1;

  // LLMConfig contains all the necessary runtime configuration for the plugin
  // to make a call to a Large Language Model. This information is passed
  // through from the core app's settings.
  message LLMConfig {
    // The provider to use (e.g., "openai", "gemini").
    string provider = 1;
    // The specific model identifier (e.g., "gpt-4o-mini").
    string model = 2;
    // The API key for the specified provider.
    string api_key = 3;
    // The base URL for the provider's API endpoint.
    string base_url = 4;
    // The generation temperature.
    float temperature = 5;
    // The network timeout in seconds for the API request.
    int32 timeout_s = 6;
  }

  // The LLM configuration for this specific request.
  LLMConfig llm_config = 2;

  // A flag indicating whether this is the second "review" pass in a
  // two-pass generation workflow.
  bool is_review_pass = 3;

  // If `is_review_pass` is true, this field will contain the complete,
  // file-formatted code generated during the first pass.
  string initial_code = 4;
}

// File represents a single file to be created in the generated project.
message File {
  // The relative path of the file from the project root
  // (e.g., "src/main.rs" or ".gitignore").
  string path = 1;
  // The complete, raw content of the file.
  string content = 2;
}

// GenerateResponse is the message sent from the plugin back to the core Spex
// application. It contains the complete result of a generation task.
message GenerateResponse {
  // A list of all files that make up the generated project. The core
  // application will be responsible for writing these files to disk.
  repeated File files = 1;
}