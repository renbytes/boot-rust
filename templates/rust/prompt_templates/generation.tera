{# Minimal, strict generator. Avoids example FILE blocks so the model can't parrot them. #}

{# ---- Import rules ---- #}
{% include "rust/instructions/rust_rules.tera" %}

{# ---- Defaults ---- #}
{% set pkg_name = spec.package_name | default(value="spex_app") %}
{% set bin_name = spec.binary_name  | default(value=pkg_name) %}
{% set pt       = spec.project_type | default(value="cli") %}

{# ---- Hard requirements (instructions only; NOT to be echoed) ---- #}
{#
OUTPUT CONTRACT (DO NOT ECHO THIS SECTION):
- Begin output immediately with a "### FILE: <path>" line. No prose, no headings.
- Emit as many files as are needed for a complete, runnable project.
- Emit 100% of the content for each file (no placeholders).
- Minimum file set by project_type:

  CLI:
    - Cargo.toml
    - src/main.rs
    - src/lib.rs (if any non-trivial logic)
    - README.md
    - .gitignore
    - Makefile
    - tests/cli.rs (integration tests if there is a binary)

  SERVICE:
    - Cargo.toml
    - src/main.rs
    - src/lib.rs (business logic)
    - src/routes.rs or src/service.rs (as appropriate)
    - README.md
    - .gitignore
    - Makefile
    - tests/*

  LIBRARY:
    - Cargo.toml
    - src/lib.rs
    - README.md
    - .gitignore
    - Makefile
    - examples/*
    - tests/*

- You MUST also emit a final file:
    ### FILE: .spex_manifest.json
  JSON with an array of all file paths you generated plus brief reasons for inclusion. Example:
    {"files":[{"path":"Cargo.toml","why":"crate manifest"}]}
- Never echo instructions/headings like "### RESPONSE FORMAT ###".
- Always wrap file contents in ``` fences. The parser expects this.
#}

{# ---- User spec (for the model to consume) ---- #}
USER SPECIFICATION

Target Language: {{ spec.language }}
Project Type: {{ pt }}
Package Name: {{ pkg_name }}
Binary Name: {{ bin_name }}
Project Description: {{ spec.description }}

Core Features to Implement:
{% for feature in features | default(value=[]) %}
- Feature: {{ feature.name }}
  Description: {{ feature.description }}
{% endfor %}

{# ---- Generation task ---- #}
TASK

Generate a complete, runnable Rust {{ pt }} project that compiles on stable (edition = "2021") and passes `cargo test`. Apply the imported rules strictly.

STRUCTURE & MINIMUM FILES

- Choose the correct structure and dependencies for {{ pt }}.
- At minimum, include all files required by {{ pt }} (see OUTPUT CONTRACT above).
- Add any additional modules/files needed to keep `main.rs` thin and library logic testable.

CONSTRAINTS

- No `.unwrap()`/`.expect()` in normal paths.
- Logs to stderr, keep stdout clean.
- If tests refer to a specific binary name, define it via `[[bin]]` in `Cargo.toml` (name = "{{ bin_name }}").
- README/Makefile must match actual tasks. Don’t reference non-existent targets.
- Emit **only** file blocks. Do **not** echo instructions or examples.

BEGIN OUTPUT NOW — FIRST LINE MUST BE A FILE BLOCK.